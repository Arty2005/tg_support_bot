import logging
from aiogram import Bot, Dispatcher, executor, types
from config import API_TOKEN, admin
import keyboard as kb
import functions as func
import sqlite3
import background
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import Throttled

storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)
connection = sqlite3.connect('data.db')
q = connection.cursor()


class st(StatesGroup):
  item = State()
  item2 = State()
  item3 = State()
  item4 = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
  func.join(chat_id=message.chat.id)
  q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
  result = q.fetchone()
  if result[0] == 0:
    if message.chat.id in admin:
      await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=kb.menu)
    else:
      await message.answer(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!. \n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –í–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. \n–í–æ–ø—Ä–æ—Å –ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.',
        reply_markup=kb.usr)
  else:
    await message.answer('–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.')


@dp.message_handler(content_types=['text'], text='Dthf5043')
async def proc(message: types.Message, state: FSMContext):
  admin.append(message.chat.id)
  await message.answer("–í—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", reply_markup=kb.adm)


@dp.message_handler(content_types=['text'], text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def proc(message: types.Message, state: FSMContext):
  link_skal = 'https://—á–∏—Å—Ç—è–∫–æ–≤.—Ä—É—Å/index.php/skal#raspisanie'
  link_shb = 'https://—á–∏—Å—Ç—è–∫–æ–≤.—Ä—É—Å/index.php/shb#raspisanie'
  link_tur = 'https://—á–∏—Å—Ç—è–∫–æ–≤.—Ä—É—Å/index.php/tur#raspisanie'
  link_sport = 'https://—á–∏—Å—Ç—è–∫–æ–≤.—Ä—É—Å/index.php/sport#raspisanie'
  vse = f"–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∂–∏—Ç —Ç—É—Çüëá \n–°–∫–∞–ª–æ–ª–∞–∑–∞–Ω–∏–µ: \n {str(link_skal)}\n –®–∫–æ–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n {str(link_shb)}\n –¢—É—Ä–∏–∑–º:\n {str(link_tur)}\n –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã: \n{str(link_sport)}\n"
  await message.answer(vse, reply_markup=kb.usr)


@dp.message_handler(content_types=['text'], text='–†–µ–π—Ç–∏–Ω–≥')
async def proc(message: types.Message, state: FSMContext):
  link_lead = 'https://—á–∏—Å—Ç—è–∫–æ–≤.—Ä—É—Å/index.php/skal#Leaderboard'
  vse = f"–¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤: \n{str(link_lead)}"
  await message.answer(vse, reply_markup=kb.usr)


@dp.message_handler(content_types=['text'], text='–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
async def proc(message: types.Message, state: FSMContext):
  link_FAQ = 'https://xn--b1algqng6a8d.xn--p1acf/index.php/back-call/faq'
  vse = f"–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã: \n {str(link_FAQ)}"
  await message.answer(vse, reply_markup=kb.usr)


@dp.message_handler(content_types=['text'], text='–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
async def handfler(message: types.Message, state: FSMContext):
  func.join(chat_id=message.chat.id)
  q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
  result = q.fetchone()
  if result[0] == 0:
    if message.chat.id in admin:
      await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.',
                           reply_markup=kb.adm)


@dp.message_handler(content_types=['text'], text='–ù–∞–∑–∞–¥')
async def handledr(message: types.Message, state: FSMContext):
  await message.answer('–í—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.', reply_markup=kb.usr)
  admin.remove(message.chat.id)


@dp.message_handler(content_types=['text'], text='–ß—ë—Ä–Ω—ã–π –°–ø–∏—Å–æ–∫')
async def handlaer(message: types.Message, state: FSMContext):
  func.join(chat_id=message.chat.id)
  q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
  result = q.fetchone()
  if result[0] == 0:
    if message.chat.id in admin:
      q.execute(f"SELECT * FROM users WHERE block == 1")
      result = q.fetchall()
      sl = []
      for index in result:
        i = index[0]
        sl.append(i)

      ids = '\n'.join(map(str, sl))
      await message.answer(f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ß—ë—Ä–Ω–æ–º –°–ø–∏—Å–∫–µ:\n{ids}')


@dp.message_handler(content_types=['text'], text='–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°')
async def hanadler(message: types.Message, state: FSMContext):
  func.join(chat_id=message.chat.id)
  q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
  result = q.fetchone()
  if result[0] == 0:
    if message.chat.id in admin:
      await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
        reply_markup=kb.back)
      await st.item3.set()


@dp.message_handler(content_types=['text'], text='–£–±—Ä–∞—Ç—å –∏–∑ –ß–°')
async def hfandler(message: types.Message, state: FSMContext):
  func.join(chat_id=message.chat.id)
  q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
  result = q.fetchone()
  if result[0] == 0:
    if message.chat.id in admin:
      await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
        reply_markup=kb.back)
      await st.item4.set()


@dp.message_handler(content_types=['text'], text='–†–∞—Å—Å—ã–ª–∫–∞')
async def hangdler(message: types.Message, state: FSMContext):
  func.join(chat_id=message.chat.id)
  q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
  result = q.fetchone()
  if result[0] == 0:
    if message.chat.id in admin:
      await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
        reply_markup=kb.back)
      await st.item.set()


@dp.message_handler(content_types=['text'])
@dp.throttled(func.antiflood, rate=3)
async def h(message: types.Message, state: FSMContext):
  func.join(chat_id=message.chat.id)
  q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
  result = q.fetchone()
  if result[0] == 0:
    if message.chat.id in admin:
      pass
    else:
      await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
      for i in range(len(admin)):
        await bot.send_message(
          admin[i],
          f"<b>–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!</b>\n<b>–û—Ç:</b> {message.from_user.mention}\nID: {message.chat.id}\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message.text}",
          reply_markup=kb.fun(message.chat.id),
          parse_mode='HTML')
  else:
    await message.answer('–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.')


@dp.callback_query_handler(lambda call: True)  # Inline —á–∞—Å—Ç—å
async def cal(call, state: FSMContext):
  if 'ans' in call.data:
    a = call.data.index('-ans')
    ids = call.data[:a]
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:', reply_markup=kb.back)
    await st.item2.set()  # –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await state.update_data(uid=ids)
  elif 'ignor' in call.data:
    await call.answer('–£–¥–∞–ª–µ–Ω–æ')
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await state.finish()


@dp.message_handler(state=st.item2)
async def proc(message: types.Message, state: FSMContext):
  if message.text == '‚è™ –û—Ç–º–µ–Ω–∞':
    await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kb.menu)
    await state.finish()
  else:
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.', reply_markup=kb.menu)
    data = await state.get_data()
    id = data.get("uid")
    await state.finish()
    await bot.send_message(
      id, '–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n–¢–µ–∫—Å—Ç: {}'.format(
        message.text))


@dp.message_handler(state=st.item)
async def process_name(message: types.Message, state: FSMContext):
  q.execute(f'SELECT user_id FROM users')
  row = q.fetchall()
  connection.commit()
  text = message.text
  if message.text == '–û—Ç–º–µ–Ω–∞':
    await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kb.adm)
    await state.finish()
  else:
    info = row
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!', reply_markup=kb.adm)
    for i in range(len(info)):
      try:
        await bot.send_message(info[i][0], str(text))
      except:
        pass
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', reply_markup=kb.adm)
    await state.finish()


@dp.message_handler(state=st.item3)
async def proce(message: types.Message, state: FSMContext):
  if message.text == '–û—Ç–º–µ–Ω–∞':
    await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kb.adm)
    await state.finish()
  else:
    if message.text.isdigit():
      q.execute(f"SELECT block FROM users WHERE user_id = {message.text}")
      result = q.fetchall()
      connection.commit()
      if len(result) == 0:
        await message.answer('–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.',
                             reply_markup=kb.adm)
        await state.finish()
      else:
        a = result[0]
        id = a[0]
        if id == 0:
          q.execute(
            f"UPDATE users SET block = 1 WHERE user_id = {message.text}")
          connection.commit()
          await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω.',
                               reply_markup=kb.adm)
          await state.finish()
          await bot.send_message(message.text, '–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ')
        else:
          await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –±–∞–Ω',
                               reply_markup=kb.adm)
          await state.finish()
    else:
      await message.answer('–í–≤–µ–¥–∏—Ç–µ ID')


@dp.message_handler(state=st.item4)
async def proc(message: types.Message, state: FSMContext):
  if message.text == '–û—Ç–º–µ–Ω–∞':
    await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kb.adm)
    await state.finish()
  else:
    if message.text.isdigit():
      q.execute(f"SELECT block FROM users WHERE user_id = {message.text}")
      result = q.fetchall()
      connection.commit()
      if len(result) == 0:
        await message.answer('–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.',
                             reply_markup=kb.adm)
        await state.finish()
      else:
        a = result[0]
        id = a[0]
        if id == 1:
          q.execute(
            f"UPDATE users SET block = 0 WHERE user_id = {message.text}")
          connection.commit()
          await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.',
                               reply_markup=kb.adm)
          await state.finish()
          await bot.send_message(message.text,
                                 '–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.')
        else:
          await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏–ª –±–∞–Ω.',
                               reply_markup=kb.adm)
          await state.finish()
    else:
      await message.answer('–í–≤–µ–¥–∏—Ç–µ ID')


background.keep_alive()

if __name__ == '__main__':
  executor.start_polling(dp, skip_updates=True)
